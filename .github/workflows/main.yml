name: Main branch CI/CD
on:
  push:
    branches:
      - main
jobs:
  frontend:
    name: Frontend tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: kanban-frontend
    steps:
      - uses: actions/checkout@v3
      - name: install packages
        run: npm install
      - name: lint
        run: npm run lint
      - name: Test
        run: npm test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: frontend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  backend:
    name: Backend tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: kanban-backend
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_DB: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      TEST_DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
    steps:
      - uses: actions/checkout@v3
      - name: Install node v18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install packages
        run: npm install
      - name: Lint
        run: npm run lint
      - name: Test
        run: npm test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          flags: backend
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  deploy:
    name: Deploy app
    needs: [frontend, backend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: kanban-backend
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - name: Install node v18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Build project
        run: npm run build
      - run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
